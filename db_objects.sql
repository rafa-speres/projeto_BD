---------------------------------------------------
-- Proejto Final - Laboratorio de Bases de Dados --
---------------------------------------------------

------------------------------------------------------
-- Scripts para Criação de Objetos na Base de Dados --
------------------------------------------------------

------------------------
-- Criação de Tabelas --
------------------------

-- Criando a tabela "USERS"
CREATE TABLE USERS (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    password VARCHAR2(64) NOT NULL,
    id_lider CHAR(14) NOT NULL,
    CONSTRAINT FK_USERS_LIDER FOREIGN KEY (id_lider) REFERENCES LIDER(CPI) ON DELETE CASCADE,
    CONSTRAINT UN_USERS_id_lider UNIQUE (id_lider)
);


-- Tabela "LOG_TABLE"
CREATE TABLE LOG_TABLE (
    user_id NUMBER NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message VARCHAR2(1000),
    CONSTRAINT FK_LOG_TABLE_USERS FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE
);


-------------------------
-- Criação de Triggers --
-------------------------

-- Trigger para armazenar a senha de um USER utilizando a função MD5 para hash
CREATE OR REPLACE TRIGGER trg_hash_password
BEFORE INSERT OR UPDATE OF password
ON USERS
FOR EACH ROW
DECLARE
    v_hash_password VARCHAR2(64);
BEGIN
    SELECT STANDARD_HASH(:NEW.password, 'MD5') INTO v_hash_password FROM DUAL;
    :NEW.password := v_hash_password;
END;


-- Trigger para inserir um registro automaticamente na tabela de USERS após uma inserção em LIDER
CREATE OR REPLACE TRIGGER trg_insert_user_automaticamente
AFTER INSERT ON LIDER
FOR EACH ROW
BEGIN
    INSERT INTO USERS (password, id_lider)
    VALUES ('admin', :NEW.CPI);
END;


---------------------------
-- Criação de Procedures --
---------------------------

-- Procedure para encontrar um Lider sem tupla na tabela USERS e inseri-lo com uma senha default (uma espécie de carga inicial de USERS)
CREATE OR REPLACE PROCEDURE sp_cadastrar_lider_user AS
BEGIN
    FOR i IN (
        SELECT CPI 
        FROM LIDER
        WHERE CPI NOT IN (SELECT id_lider FROM USERS)
    ) LOOP
        INSERT INTO USERS (Password, id_lider)
        VALUES ('admin', i.CPI);
    END LOOP;
    
    COMMIT;
END;

-- Chamando a Procedure "sp_cadastrar_lider_user" para cadastrar os líderes já existentes na base
BEGIN
    sp_cadastrar_lider_user;
END;


-- Trigger para excluir um registro automaticamente na tabela de USERS após uma exclusão em LIDER
--CREATE OR REPLACE TRIGGER trg_delete_user_automaticamente
--AFTER DELETE ON LIDER
--FOR EACH ROW
--BEGIN
--    DELETE FROM USERS WHERE id_lider = :OLD.CPI;
--END;



-- Delete para teste do trigger "trg_delete_user_automaticamente"
--DELETE FROM LIDER WHERE CPI = '444.444.444-44'; --MUTANTE


------------------------
-- Criação de Pacotes --
------------------------

-- Criação do pacote de OFICIAL
CREATE OR REPLACE PACKAGE pkg_oficial AS
    PROCEDURE get_habitantes_relatorio(p_oficial_id IN CHAR);
END pkg_oficial;

-- Corpo do pacote de OFICIAL
CREATE OR REPLACE PACKAGE BODY pkg_oficial AS
    
    
    PROCEDURE get_habitantes_relatorio(p_oficial_id IN CHAR) IS
        CURSOR c_habitantes IS
            SELECT 
                e.nome AS especie_nome,
                e.inteligente AS especie_inteligente,
                c.nome AS comunidade_nome,
                c.qtd_habitantes AS qtd_habitantes,
                p.id_astro AS planeta_nome,
                s.estrela AS sistema_estrela,
                s.nome AS sistema_nome,
                f.nome AS faccao_nome,
                h.data_ini AS data_inicio,
                h.data_fim AS data_fim
            FROM 
                Habitacao h
                JOIN Especie e ON h.especie = e.nome
                JOIN Comunidade c ON h.especie = c.especie AND h.comunidade = c.nome
                JOIN Planeta p ON h.planeta = p.id_astro
                LEFT JOIN Sistema s ON p.id_astro = s.estrela
                LEFT JOIN Participa pa ON h.especie = pa.especie AND h.comunidade = pa.comunidade
                LEFT JOIN Faccao f ON pa.faccao = f.nome
            WHERE
                p.id_astro IN (
                    SELECT planeta 
                    FROM Dominancia
                    WHERE nacao = (SELECT nacao FROM Lider WHERE cpi = p_oficial_id)
                )
            ORDER BY e.nome, c.nome, p.id_astro, s.estrela;
    BEGIN
        DBMS_OUTPUT.PUT_LINE('ENTREI NO BEGIN. ID: ' || p_oficial_id);
        FOR r IN c_habitantes LOOP
            DBMS_OUTPUT.PUT_LINE('Especie: ' || r.especie_nome || ', Inteligente: ' || r.especie_inteligente || 
                                 ', Comunidade: ' || r.comunidade_nome || ', Qtd Habitantes: ' || r.qtd_habitantes || 
                                 ', Planeta: ' || r.planeta_nome ||
                                 ', Sistema: ' || r.sistema_nome || ' (' || r.sistema_estrela || ')' || 
                                 ', Faccao: ' || r.faccao_nome || ', Data Inicio: ' || r.data_inicio || 
                                 ', Data Fim: ' || r.data_fim);
        END LOOP;
    END get_habitantes_relatorio;

END pkg_oficial;


-- INTERMINADO (NÃO RETORNA NADA QUE ESTÁ NO LOOP)

-- Testando o relatório do OFICIAL:
BEGIN
    pkg_oficial.get_habitantes_relatorio(p_oficial_id => '999.999.999-98');
END;



--Criação do pacote do Lider de facção
CREATE OR REPLACE PACKAGE PacoteLiderFaccao AS
    -- Procedimento para remover uma fac??o de uma na??o
    PROCEDURE RemoverFaccaoDeNacao(
        p_nacao IN VARCHAR2,
        p_faccao IN VARCHAR2
    );

    PROCEDURE AlterarNomeFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    );

    PROCEDURE IndicarNovoLiderFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    );

    PROCEDURE CredenciarComunidadesNovas(
        p_faccao IN VARCHAR2,
        p_especie IN VARCHAR2,
        p_comunidade IN VARCHAR2
    );
END PacoteLiderFaccao;


-- Corpo do pacote
CREATE OR REPLACE PACKAGE BODY PacoteLiderFaccao AS
    PROCEDURE RemoverFaccaoDeNacao(
        p_nacao IN VARCHAR2,
        p_faccao IN VARCHAR2
    ) IS
    BEGIN
        -- Remove a rela??o entre a nação e a facção
        DELETE FROM NACAO_FACCAO
        WHERE NACAO = p_nacao
        AND FACCAO = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover facção da nação: ' || SQLERRM);
            RAISE;
    END RemoverFaccaoDeNacao;

    PROCEDURE AlterarNomeFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    ) IS
    BEGIN

        UPDATE FACCAO
        SET nome = p_nome
        WHERE FACCAO.NOME = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover facção da nação: ' || SQLERRM);
            RAISE;
    END AlterarNomeFaccao;

    PROCEDURE IndicarNovoLiderFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    ) IS
    BEGIN

        UPDATE FACCAO
        SET lider = p_nome
        WHERE FACCAO.NOME = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover facção da nação: ' || SQLERRM);
            RAISE;
    END IndicarNovoLiderFaccao;

     PROCEDURE CredenciarComunidadesNovas(
        p_faccao IN VARCHAR2,
        p_especie IN VARCHAR2,
        p_comunidade IN VARCHAR2
    ) IS
    BEGIN

        INSERT INTO VW_LIDER_FACCAO (FACCAO, ESPECIE, NOME_COMUNIDADE)
        VALUES (p_faccao, p_especie, p_comunidade);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover facção da nação: ' || SQLERRM);
            RAISE;
    END CredenciarComunidadesNovas;
END PacoteLiderFaccao;


-- View para visualização e credenciamento das comunidades por parte do lider
CREATE OR REPLACE VIEW VW_LIDER_FACCAO AS
SELECT
    n.NOME AS NOME_NACAO,
    p.ID_ASTRO AS NOME_PLANETA,
    c.NOME AS NOME_COMUNIDADE,
    c.QTD_HABITANTES,
    CASE
        WHEN pa.FACCAO IS NOT NULL THEN 'V'
        ELSE 'F'
    END AS CREDENCIADA,
    f.LIDER,
    f.NOME AS FACCAO,
    c.ESPECIE
FROM
    NACAO n
JOIN
    DOMINANCIA d ON n.NOME = d.NACAO AND d.DATA_FIM IS NULL
JOIN
    PLANETA p ON d.PLANETA = p.ID_ASTRO
JOIN
    HABITACAO h ON p.ID_ASTRO = h.PLANETA AND h.DATA_FIM IS NULL
JOIN
    COMUNIDADE c ON h.ESPECIE = c.ESPECIE AND h.COMUNIDADE = c.NOME
JOIN
    NACAO_FACCAO nf ON n.NOME = nf.NACAO
JOIN
    FACCAO f ON nf.FACCAO = f.NOME
LEFT JOIN
    PARTICIPA pa ON pa.FACCAO = f.NOME AND pa.ESPECIE = c.ESPECIE AND pa.COMUNIDADE = c.NOME;


-- Trigger instead-of para manipular as operaçõees de inserção
CREATE OR REPLACE TRIGGER trg_vw_lider_faccao_insert
INSTEAD OF INSERT ON VW_LIDER_FACCAO
FOR EACH ROW
BEGIN
    BEGIN
        INSERT INTO PARTICIPA (FACCAO, ESPECIE, COMUNIDADE)
        VALUES (:NEW.FACCAO, :NEW.ESPECIE, :NEW.NOME_COMUNIDADE);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Erro ao inserir dados na tabela PARTICIPA');
    END;
END;


-- Teste da procedure do oficial

--SELECT 
--    e.nome AS especie_nome,
--    e.inteligente AS especie_inteligente,
--    c.nome AS comunidade_nome,
--    c.qtd_habitantes AS qtd_habitantes,
--    p.id_astro AS planeta_nome,
--    s.estrela AS sistema_estrela,
--    s.nome AS sistema_nome,
--    f.nome AS faccao_nome,
--    h.data_ini AS data_inicio,
--    h.data_fim AS data_fim
--    FROM 
--        Habitacao h
--        JOIN Especie e ON h.especie = e.nome
--        JOIN Comunidade c ON h.especie = c.especie AND h.comunidade = c.nome
--        JOIN Planeta p ON h.planeta = p.id_astro
--        LEFT JOIN Sistema s ON p.id_astro = s.estrela
--        LEFT JOIN Participa pa ON h.especie = pa.especie AND h.comunidade = pa.comunidade
--        LEFT JOIN Faccao f ON pa.faccao = f.nome
--    WHERE
--        p.id_astro IN (
--            SELECT planeta 
--            FROM Dominancia
--            WHERE nacao = (SELECT nacao FROM Lider WHERE cpi = p_oficial_id)
--        )
--    ORDER BY e.nome, c.nome, p.id_astro, s.estrela;
--
--
--
--SELECT 
--    * --e.nome AS especie_nome,
--    --e.inteligente AS especie_inteligente,
--    -- c.nome AS comunidade_nome,
--    FROM 
--        Habitacao h
--        JOIN Especie e ON h.especie = e.nome
--        JOIN Comunidade c ON h.especie = c.especie;


----------------------------------------------------------------------------------------------------------------------------

----------------------------------
-- Relatório de Líder de Facção --
----------------------------------


-- Criando um Tipo para exibir o relatório de LIDER de FACCAO
CREATE OR REPLACE TYPE tp_relatorio_lider_faccao AS OBJECT (
    agrupamento VARCHAR2(100), -- Contém os itens distintos para o agrupamento escolhido.
    especie VARCHAR2(100), -- Campo adicionado para o caso DEFAULT, onde queremos exibir a espécie como informação da comunidade. Substitui o campo "qtd_comunidades" no caso DEFAULT.
    qtd_comunidades NUMBER, -- Quantidade de comunidades contidas na agregação sendo definida.
    total_habitantes NUMBER -- Agregado de total de habitantes na determinada comunidade ou na agregação sendo definida.
);

-- Criando um Tipo para a tabela de registros que será utilizada para exibir o relatório de LIDER de FACCAO
CREATE OR REPLACE TYPE tp_relatorio_tabela_lider_faccao AS TABLE OF tp_relatorio_lider_faccao;

-- Função para gerar o relatório do LIDER de FACCAO
CREATE OR REPLACE FUNCTION relatorio_lider_faccao(
    p_lider_id IN CHAR,
    p_agrupamento IN VARCHAR2 DEFAULT NULL
) RETURN tp_relatorio_tabela_lider_faccao PIPELINED
IS
    v_faccao_nome VARCHAR2(15);
BEGIN
    -- Buscando o nome da FACCAO do LIDER com o CPI informado
    SELECT FACCAO.NOME
    INTO v_faccao_nome
    FROM FACCAO
    JOIN LIDER ON FACCAO.LIDER = LIDER.CPI
    WHERE LIDER.CPI = p_lider_id;

    -- Verificando se a FACCAO foi encontrada
    IF v_faccao_nome IS NOT NULL THEN
        -- Caso DEFAULT: informações sobre as comunidades da FACCAO do LIDER
        IF p_agrupamento IS NULL THEN
            FOR rec IN (
                SELECT C.NOME AS AGRUPAMENTO, C.ESPECIE AS ESPECIE, C.QTD_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, rec.ESPECIE, NULL, rec.QTD_HABITANTES));
            END LOOP;

        -- Agrupamento por ESPECIE
        ELSIF p_agrupamento = 'ESPECIE' THEN
            FOR rec IN (
                SELECT C.ESPECIE AS AGRUPAMENTO, COUNT(C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY C.ESPECIE
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por PLANETA
        ELSIF p_agrupamento = 'PLANETA' THEN
            FOR rec IN (
                SELECT H.PLANETA AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY H.PLANETA
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por SISTEMA
        ELSIF p_agrupamento = 'SISTEMA' THEN
            FOR rec IN (
                SELECT S.NOME AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                JOIN ORBITA_PLANETA OP ON H.PLANETA = OP.PLANETA
                JOIN ESTRELA E ON OP.ESTRELA = E.ID_ESTRELA
                JOIN SISTEMA S ON E.ID_ESTRELA = S.ESTRELA
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY S.NOME
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por NACAO
        ELSIF p_agrupamento = 'NACAO' THEN
            FOR rec IN (
                SELECT D.NACAO AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY D.NACAO
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        ELSE
            RETURN;
        END IF;

    ELSE
        RETURN;
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN;
    WHEN OTHERS THEN
        RETURN;
END;


-- Testes de chamada da função:
-- Caso DEFAULT
SELECT agrupamento AS COMUNIDADE, especie, total_habitantes FROM TABLE(relatorio_lider_faccao(p_lider_id => '999.999.999-98'));

-- Agrupamento por ESPECIE
SELECT agrupamento AS ESPECIE, qtd_comunidades, total_habitantes FROM TABLE(relatorio_lider_faccao(p_lider_id => '999.999.999-98', p_agrupamento => 'ESPECIE'));

-- Agrupamento por PLANETA
SELECT agrupamento AS PLANETA, qtd_comunidades, total_habitantes FROM TABLE(relatorio_lider_faccao(p_lider_id => '999.999.999-98', p_agrupamento => 'PLANETA'));

-- Agrupamento por SISTEMA
SELECT agrupamento AS SISTEMA, qtd_comunidades, total_habitantes FROM TABLE(relatorio_lider_faccao(p_lider_id => '999.999.999-98', p_agrupamento => 'SISTEMA'));

-- Agrupamento por NACAO
SELECT agrupamento AS NACAO, qtd_comunidades, total_habitantes FROM TABLE(relatorio_lider_faccao(p_lider_id => '999.999.999-98', p_agrupamento => 'NACAO'));

