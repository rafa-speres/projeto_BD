---------------------------------------------------
-- Proejto Final - Laboratorio de Bases de Dados --
---------------------------------------------------

------------------------------------------------------
-- Scripts para Criacao de Objetos na Base de Dados --
------------------------------------------------------

------------------------
-- Criacao de Tabelas --
------------------------

-- Criando a tabela "USERS"
CREATE TABLE USERS (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    password VARCHAR2(64) NOT NULL,
    id_lider CHAR(14) NOT NULL,
    CONSTRAINT FK_USERS_LIDER FOREIGN KEY (id_lider) REFERENCES LIDER(CPI) ON DELETE CASCADE,
    CONSTRAINT UN_USERS_id_lider UNIQUE (id_lider)
);


-- Tabela "LOG_TABLE"
CREATE TABLE LOG_TABLE (
    user_id NUMBER NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message VARCHAR2(1000),
    CONSTRAINT FK_LOG_TABLE_USERS FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE
);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------
-- Criacao de Triggers --
-------------------------

-- Trigger para armazenar a senha de um USER utilizando a funcao MD5 para hash
CREATE OR REPLACE TRIGGER trg_hash_password
BEFORE INSERT OR UPDATE OF password
ON USERS
FOR EACH ROW
DECLARE
    v_hash_password VARCHAR2(64);
BEGIN
    SELECT STANDARD_HASH(:NEW.password, 'MD5') INTO v_hash_password FROM DUAL;
    :NEW.password := v_hash_password;
END;


-- Trigger para inserir um registro automaticamente na tabela de USERS apos uma insercao em LIDER
CREATE OR REPLACE TRIGGER trg_insert_user_automaticamente
AFTER INSERT ON LIDER
FOR EACH ROW
BEGIN
    INSERT INTO USERS (password, id_lider)
    VALUES ('admin', :NEW.CPI);
END;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------
-- Criacao de Procedures --
---------------------------

-- Procedure para encontrar um Lider sem tupla na tabela USERS e inseri-lo com uma senha default (uma especie de carga inicial de USERS)
CREATE OR REPLACE PROCEDURE sp_cadastrar_lider_user AS
BEGIN
    FOR i IN (
        SELECT CPI 
        FROM LIDER
        WHERE CPI NOT IN (SELECT id_lider FROM USERS)
    ) LOOP
        INSERT INTO USERS (Password, id_lider)
        VALUES ('admin', i.CPI);
    END LOOP;
    
    COMMIT;
END;

-- Chamando a Procedure "sp_cadastrar_lider_user" para cadastrar os lideres ja existentes na base
BEGIN
    sp_cadastrar_lider_user;
END;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------
-- Criacao de Pacotes --
------------------------

-- Pacote do LIDER de FACCAO --

CREATE OR REPLACE PACKAGE PacoteLiderFaccao AS
    -- Procedimento para remover uma FACCAO de NACAO
    PROCEDURE RemoverFaccaoDeNacao(
        p_nacao IN VARCHAR2,
        p_faccao IN VARCHAR2
    );

    PROCEDURE AlterarNomeFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    );

    PROCEDURE IndicarNovoLiderFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    );

    PROCEDURE CredenciarComunidadesNovas(
        p_faccao IN VARCHAR2,
        p_especie IN VARCHAR2,
        p_comunidade IN VARCHAR2
    );
END PacoteLiderFaccao;


-- Corpo do pacote do LIDER de FACCAO
CREATE OR REPLACE PACKAGE BODY PacoteLiderFaccao AS
    PROCEDURE RemoverFaccaoDeNacao(
        p_nacao IN VARCHAR2,
        p_faccao IN VARCHAR2
    ) IS
    BEGIN
        -- Remove a relacao entre a NACAO e a FACCAO
        DELETE FROM NACAO_FACCAO
        WHERE NACAO = p_nacao
        AND FACCAO = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover faccao da nacao: ' || SQLERRM);
            RAISE;
    END RemoverFaccaoDeNacao;

    PROCEDURE AlterarNomeFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    ) IS
    BEGIN

        UPDATE FACCAO
        SET nome = p_nome
        WHERE FACCAO.NOME = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover faccao da nacao: ' || SQLERRM);
            RAISE;
    END AlterarNomeFaccao;

    PROCEDURE IndicarNovoLiderFaccao(
        p_faccao IN VARCHAR2,
        p_nome IN VARCHAR2
    ) IS
    BEGIN

        UPDATE FACCAO
        SET lider = p_nome
        WHERE FACCAO.NOME = p_faccao;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover faccao da nacao: ' || SQLERRM);
            RAISE;
    END IndicarNovoLiderFaccao;

     PROCEDURE CredenciarComunidadesNovas(
        p_faccao IN VARCHAR2,
        p_especie IN VARCHAR2,
        p_comunidade IN VARCHAR2
    ) IS
    BEGIN

        INSERT INTO VW_LIDER_FACCAO (FACCAO, ESPECIE, NOME_COMUNIDADE)
        VALUES (p_faccao, p_especie, p_comunidade);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao remover faccao da nacao: ' || SQLERRM);
            RAISE;
    END CredenciarComunidadesNovas;
END PacoteLiderFaccao;


-- View para visualizacao e credenciamento das comunidades por parte do lider
CREATE OR REPLACE VIEW VW_LIDER_FACCAO AS
SELECT
    n.NOME AS NOME_NACAO,
    p.ID_ASTRO AS NOME_PLANETA,
    c.NOME AS NOME_COMUNIDADE,
    c.QTD_HABITANTES,
    CASE
        WHEN pa.FACCAO IS NOT NULL THEN 'V'
        ELSE 'F'
    END AS CREDENCIADA,
    f.LIDER,
    f.NOME AS FACCAO,
    c.ESPECIE
FROM
    NACAO n
JOIN
    DOMINANCIA d ON n.NOME = d.NACAO AND d.DATA_FIM IS NULL
JOIN
    PLANETA p ON d.PLANETA = p.ID_ASTRO
JOIN
    HABITACAO h ON p.ID_ASTRO = h.PLANETA AND h.DATA_FIM IS NULL
JOIN
    COMUNIDADE c ON h.ESPECIE = c.ESPECIE AND h.COMUNIDADE = c.NOME
JOIN
    NACAO_FACCAO nf ON n.NOME = nf.NACAO
JOIN
    FACCAO f ON nf.FACCAO = f.NOME
LEFT JOIN
    PARTICIPA pa ON pa.FACCAO = f.NOME AND pa.ESPECIE = c.ESPECIE AND pa.COMUNIDADE = c.NOME;


-- Trigger instead-of para manipular as operacoes de insercao
CREATE OR REPLACE TRIGGER trg_vw_lider_faccao_insert
INSTEAD OF INSERT ON VW_LIDER_FACCAO
FOR EACH ROW
DECLARE
    v_faccao VARCHAR2(100);
BEGIN
    BEGIN
        -- Check if the faccao and comunidade exist
        SELECT f.NOME
        INTO v_faccao
        FROM
            NACAO n
        JOIN
            DOMINANCIA d ON n.NOME = d.NACAO AND d.DATA_FIM IS NULL
        JOIN
            PLANETA p ON d.PLANETA = p.ID_ASTRO
        JOIN
            HABITACAO h ON p.ID_ASTRO = h.PLANETA AND h.DATA_FIM IS NULL
        JOIN
            COMUNIDADE c ON h.ESPECIE = c.ESPECIE AND h.COMUNIDADE = c.NOME
        JOIN
            NACAO_FACCAO nf ON n.NOME = nf.NACAO
        JOIN
            FACCAO f ON nf.FACCAO = f.NOME
        WHERE f.NOME = :NEW.FACCAO AND c.NOME = :NEW.NOME_COMUNIDADE AND c.Especie = :NEW.ESPECIE;

        -- If the faccao and comunidade exist, insert into PARTICIPA
        INSERT INTO PARTICIPA (FACCAO, ESPECIE, COMUNIDADE)
        VALUES (:NEW.FACCAO, :NEW.ESPECIE, :NEW.NOME_COMUNIDADE);
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'A comunidade não pertence a um planeta possivel.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Erro ao inserir dados na tabela PARTICIPA: ' || SQLERRM);
    END;
END;





-- Pacote do OFICIAL --

-- Criando um Tipo para exibir o relatório do OFICIAL
CREATE OR REPLACE TYPE tp_relatorio_oficial AS OBJECT (
    agrupamento VARCHAR2(100), -- Contém os itens distintos para o agrupamento escolhido.
    qtd_comunidades NUMBER, -- Quantidade de comunidades contidas na agregação sendo definida.
    total_habitantes NUMBER, -- Agregado de total de habitantes na determinada comunidade ou na agregação sendo definida.
    data_ini DATE, -- Data inicial de HABITACAO da COMUNIDADE
    data_fim DATE -- Data final de HABITACAO da COMUNIDADE ou agrupamento
);

-- Criando um Tipo para a tabela de registros que será utilizada para exibir o relatório do OFICIAL
CREATE OR REPLACE TYPE tp_relatorio_tabela_oficial AS TABLE OF tp_relatorio_oficial;

-- Criação do pacote do OFICIAL
CREATE OR REPLACE PACKAGE pkg_oficial AS
    FUNCTION relatorio_oficial(
        p_oficial_id IN CHAR,
        p_agrupamento IN VARCHAR2 DEFAULT NULL
    ) RETURN tp_relatorio_tabela_oficial PIPELINED;
END pkg_oficial;


-- Corpo do pacote do OFICIAL
CREATE OR REPLACE PACKAGE BODY pkg_oficial AS
    FUNCTION relatorio_oficial(
        p_oficial_id IN CHAR,
        p_agrupamento IN VARCHAR2 DEFAULT NULL
    ) RETURN tp_relatorio_tabela_oficial PIPELINED
    IS
        v_nacao_nome VARCHAR2(15);
    BEGIN
        -- Buscando o nome da NACAO do LIDER com o CPI informado
        SELECT LIDER.NACAO
        INTO v_nacao_nome
        FROM LIDER
        WHERE LIDER.CPI = p_oficial_id;

        -- Verificando se a NACAO foi encontrada
        IF v_nacao_nome IS NOT NULL THEN
            -- Caso DEFAULT: informações sobre as comunidades da NACAO do LIDER
            IF p_agrupamento IS NULL THEN
                FOR rec IN (
                    SELECT 
                        C.NOME AS AGRUPAMENTO, 
                        SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES,
                        MIN(H.DATA_INI) AS DATA_INI,
                        MAX(H.DATA_FIM) AS DATA_FIM
                    FROM COMUNIDADE C
                    JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                    JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                    WHERE D.NACAO = v_nacao_nome
                    GROUP BY C.NOME
                ) LOOP
                    PIPE ROW(tp_relatorio_oficial(rec.AGRUPAMENTO, NULL, rec.TOTAL_HABITANTES, rec.DATA_INI, rec.DATA_FIM));
                END LOOP;

            -- Agrupamento por FACCAO
            ELSIF p_agrupamento = 'FACCAO' THEN
                FOR rec IN (
                    SELECT 
                        P.FACCAO AS AGRUPAMENTO, 
                        COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, 
                        SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES,
                        NULL AS DATA_INI,
                        NULL AS DATA_FIM
                    FROM COMUNIDADE C
                    JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                    JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                    JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                    WHERE D.NACAO = v_nacao_nome
                    GROUP BY P.FACCAO
                ) LOOP
                    PIPE ROW(tp_relatorio_oficial(rec.AGRUPAMENTO, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES, rec.DATA_INI, rec.DATA_FIM));
                END LOOP;

            -- Agrupamento por ESPECIE
            ELSIF p_agrupamento = 'ESPECIE' THEN
                FOR rec IN (
                    SELECT 
                        C.ESPECIE AS AGRUPAMENTO, 
                        COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, 
                        SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES,
                        NULL AS DATA_INI,
                        NULL AS DATA_FIM
                    FROM COMUNIDADE C
                    JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                    JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                    WHERE D.NACAO = v_nacao_nome
                    GROUP BY C.ESPECIE
                ) LOOP
                    PIPE ROW(tp_relatorio_oficial(rec.AGRUPAMENTO, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES, rec.DATA_INI, rec.DATA_FIM));
                END LOOP;

            -- Agrupamento por PLANETA
            ELSIF p_agrupamento = 'PLANETA' THEN
                FOR rec IN (
                    SELECT 
                        H.PLANETA AS AGRUPAMENTO, 
                        COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, 
                        SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES,
                        NULL AS DATA_INI,
                        NULL AS DATA_FIM
                    FROM COMUNIDADE C
                    JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                    JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                    WHERE D.NACAO = v_nacao_nome
                    GROUP BY H.PLANETA
                ) LOOP
                    PIPE ROW(tp_relatorio_oficial(rec.AGRUPAMENTO, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES, rec.DATA_INI, rec.DATA_FIM));
                END LOOP;

            -- Agrupamento por SISTEMA
            ELSIF p_agrupamento = 'SISTEMA' THEN
                FOR rec IN (
                    SELECT 
                        S.NOME AS AGRUPAMENTO, 
                        COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, 
                        SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES,
                        NULL AS DATA_INI,
                        NULL AS DATA_FIM
                    FROM COMUNIDADE C
                    JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                    JOIN ORBITA_PLANETA OP ON H.PLANETA = OP.PLANETA
                    JOIN ESTRELA E ON OP.ESTRELA = E.ID_ESTRELA
                    JOIN SISTEMA S ON E.ID_ESTRELA = S.ESTRELA
                    JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                    WHERE D.NACAO = v_nacao_nome
                    GROUP BY S.NOME
                ) LOOP
                    PIPE ROW(tp_relatorio_oficial(rec.AGRUPAMENTO, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES, rec.DATA_INI, rec.DATA_FIM));
                END LOOP;

            ELSE
                RETURN;
            END IF;

        ELSE
            RETURN;
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN;
        WHEN OTHERS THEN
            RETURN;
    END;
END pkg_oficial;





-- Pacote do COMANDANTE --


-- Definindo o pacote do COMANDANTE
CREATE OR REPLACE PACKAGE pkg_comandante AS
    PROCEDURE incluir_nacao_em_federacao(p_user_id CHAR, p_nacao VARCHAR2, p_federacao VARCHAR2);
    PROCEDURE excluir_nacao_de_federacao(p_user_id CHAR, p_nacao VARCHAR2, p_federacao VARCHAR2);
    PROCEDURE criar_federacao_com_nacao(p_federacao VARCHAR2, p_user_id CHAR, p_nacao VARCHAR2, p_data_fund DATE);
    PROCEDURE inserir_dominancia(p_planeta VARCHAR2, p_nacao VARCHAR2, p_data_ini DATE);
    --FUNCTION relatorio_planetas_dominados(p_comandante_id IN CHAR) RETURN tp_relatorio_tabela_comandante PIPELINED;
    --FUNCTION relatorio_planetas_potenciais(p_comandante_id IN CHAR, p_distancia_maxima NUMBER) RETURN tp_relatorio_tabela_comandante PIPELINED;
    
END pkg_comandante;


-- Corpo do pacote do COMANDANTE
CREATE OR REPLACE PACKAGE BODY pkg_comandante AS

    PROCEDURE incluir_nacao_em_federacao(p_user_id CHAR, p_nacao VARCHAR2, p_federacao VARCHAR2) IS
        v_nacao VARCHAR2(15);
    BEGIN
        -- Obter a NACAO do LIDER logado
        SELECT NACAO INTO v_nacao
        FROM LIDER
        WHERE CPI = (SELECT id_lider FROM USERS WHERE id_lider = p_user_id);

        -- Verificar se a nacao inserida e a mesma do lider logado
        IF v_nacao = p_nacao THEN
            UPDATE NACAO
            SET FEDERACAO = p_federacao
            WHERE NOME = v_nacao;
            IF SQL%ROWCOUNT = 0 THEN
                DBMS_OUTPUT.PUT_LINE('Nenhuma linha atualizada. Verifique os dados.');
            ELSE
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('Nacao ' || v_nacao || ' foi incluida na federacao ' || p_federacao);
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Erro: Voce so pode modificar a sua propria nacao.');
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nacao ou federacao nao encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao incluir nação em federacao: ' || SQLERRM);
            RAISE;
    END incluir_nacao_em_federacao;

    PROCEDURE excluir_nacao_de_federacao(p_user_id CHAR, p_nacao VARCHAR2, p_federacao VARCHAR2) IS
        v_nacao VARCHAR2(15);
    BEGIN
        -- Obter a nação do líder logado
        SELECT NACAO INTO v_nacao
        FROM LIDER
        WHERE CPI = (SELECT id_lider FROM USERS WHERE id_lider = p_user_id);

        -- Verificar se a nação inserida e a mesma do LIDER logado
        IF v_nacao = p_nacao THEN
            UPDATE NACAO
            SET FEDERACAO = NULL
            WHERE NOME = v_nacao AND FEDERACAO = p_federacao;
            IF SQL%ROWCOUNT = 0 THEN
                DBMS_OUTPUT.PUT_LINE('Nenhuma linha atualizada. Verifique os dados.');
            ELSE
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('Nacao ' || v_nacao || ' foi removida da federacao ' || p_federacao);
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Erro: Voce so pode modificar a sua propria nacao.');
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nacao ou federacao nao encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao excluir nação de federaçao: ' || SQLERRM);
            RAISE;
    END excluir_nacao_de_federacao;

    PROCEDURE criar_federacao_com_nacao(p_federacao VARCHAR2, p_user_id CHAR, p_nacao VARCHAR2, p_data_fund DATE) IS
        v_nacao VARCHAR2(15);
    BEGIN
        -- Obter a nação do LIDER logado
        SELECT NACAO INTO v_nacao
        FROM LIDER
        WHERE CPI = (SELECT id_lider FROM USERS WHERE id_lider = p_user_id);

        -- Verificar se a nacao e a mesma do lider logado
        IF v_nacao = p_nacao THEN
            INSERT INTO FEDERACAO (NOME, DATA_FUND)
            VALUES (p_federacao, p_data_fund);
            
            UPDATE NACAO
            SET FEDERACAO = p_federacao
            WHERE NOME = v_nacao;
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Federação ' || p_federacao || ' criada com a nação ' || v_nacao);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Erro: Você só pode criar federação com a sua própria nação.');
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nacao nao encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao criar federacao com nacao: ' || SQLERRM);
            RAISE;
    END criar_federacao_com_nacao;

    PROCEDURE inserir_dominancia(p_planeta VARCHAR2, p_nacao VARCHAR2, p_data_ini DATE) IS
    BEGIN
        INSERT INTO DOMINANCIA (PLANETA, NACAO, DATA_INI)
        SELECT p_planeta, p_nacao, p_data_ini
        FROM DUAL
        WHERE NOT EXISTS (
            SELECT 1 FROM DOMINANCIA
            WHERE PLANETA = p_planeta AND DATA_FIM IS NULL
        );
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro ao inserir dominancia: ' || SQLERRM);
            RAISE;
    END inserir_dominancia;
    
    -- Relatório do Comandante
    
/* FUNCTION relatorio_planetas_dominados(
        p_comandante_id IN CHAR
    ) RETURN tp_relatorio_tabela_comandante PIPELINED
    IS
        v_nacao_nome VARCHAR2(15);
    BEGIN
        SELECT NACAO
        INTO v_nacao_nome
        FROM LIDER
        WHERE CPI = p_comandante_id;

        FOR rec IN (
            SELECT 
                p.id_astro AS planeta,
                d.nacao AS nacao_dominante,
                d.data_ini AS data_inicio,
                d.data_fim AS data_fim,
                COUNT(DISTINCT c.nome) AS qtd_comunidades,
                COUNT(DISTINCT e.nome) AS qtd_especies,
                SUM(c.qtd_habitantes) AS qtd_habitantes,
                COUNT(DISTINCT pa.faccao) AS qtd_faccoes,
                (SELECT pa.faccao 
                 FROM Participa pa 
                 JOIN Comunidade c ON pa.especie = c.especie AND pa.comunidade = c.nome 
                 JOIN Habitacao h ON c.especie = h.especie AND c.nome = h.comunidade 
                 WHERE h.planeta = p.id_astro 
                 GROUP BY pa.faccao 
                 ORDER BY COUNT(*) DESC 
                 FETCH FIRST 1 ROWS ONLY) AS faccao_majoritaria
            FROM 
                Planeta p
                JOIN Dominancia d ON p.id_astro = d.planeta
                JOIN Habitacao h ON p.id_astro = h.planeta
                JOIN Comunidade c ON h.especie = c.especie AND h.comunidade = c.nome
                JOIN Especie e ON h.especie = e.nome
                LEFT JOIN Participa pa ON c.especie = pa.especie AND c.nome = pa.comunidade
            GROUP BY 
                p.id_astro, d.nacao, d.data_ini, d.data_fim
            ORDER BY 
                p.id_astro
        ) LOOP
            PIPE ROW(tp_relatorio_comandante(
                rec.planeta,
                rec.nacao_dominante,
                rec.data_inicio,
                rec.data_fim,
                rec.qtd_comunidades,
                rec.qtd_especies,
                rec.qtd_habitantes,
                CASE 
                    WHEN rec.nacao_dominante = v_nacao_nome THEN rec.qtd_faccoes
                    ELSE NULL
                END,
                rec.faccao_majoritaria
            ));
        END LOOP;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN;
        WHEN OTHERS THEN
            RETURN;
    END relatorio_planetas_dominados;

    FUNCTION relatorio_planetas_potenciais(
        p_comandante_id IN CHAR,
        p_distancia_maxima NUMBER
    ) RETURN tp_relatorio_tabela_comandante PIPELINED
    IS
        v_nacao_nome VARCHAR2(15);
    BEGIN
        SELECT NACAO
        INTO v_nacao_nome
        FROM LIDER
        WHERE CPI = p_comandante_id;

        FOR rec IN (
            SELECT 
                p.id_astro AS planeta,
                NULL AS nacao_dominante,
                NULL AS data_inicio,
                NULL AS data_fim,
                COUNT(DISTINCT c.nome) AS qtd_comunidades,
                COUNT(DISTINCT e.nome) AS qtd_especies,
                SUM(c.qtd_habitantes) AS qtd_habitantes,
                NULL AS qtd_faccoes,
                NULL AS faccao_majoritaria
            FROM 
                Planeta p
                JOIN Sistema s ON p.id_astro = s.estrela
                JOIN Habitacao h ON p.id_astro = h.planeta
                JOIN Comunidade c ON h.especie = c.especie AND h.comunidade = c.nome
                JOIN Especie e ON h.especie = e.nome
            WHERE 
                p.id_astro NOT IN (SELECT planeta FROM Dominancia WHERE data_fim IS NULL)
                AND EXISTS (
                    SELECT 1 
                    FROM Dominancia d 
                    JOIN Sistema s2 ON d.planeta = s2.estrela 
                    WHERE d.nacao = v_nacao_nome 
                    AND SQRT(POWER(s.x - s2.x, 2) + POWER(s.y - s2.y, 2) + POWER(s.z - s2.z, 2)) <= p_distancia_maxima
                )
            GROUP BY 
                p.id_astro
            ORDER BY 
                p.id_astro
        ) LOOP
            PIPE ROW(tp_relatorio_comandante(
                rec.planeta,
                rec.nacao_dominante,
                rec.data_inicio,
                rec.data_fim,
                rec.qtd_comunidades,
                rec.qtd_especies,
                rec.qtd_habitantes,
                CASE 
                    WHEN rec.nacao_dominante = v_nacao_nome THEN rec.qtd_faccoes
                    ELSE NULL
                END,
                rec.faccao_majoritaria
            ));
        END LOOP;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN;
        WHEN OTHERS THEN
            RETURN;
    END relatorio_planetas_potenciais;
*/

END pkg_comandante;





-- Pacote do CIENTISTA --

CREATE OR REPLACE TYPE tp_estrela AS OBJECT (
    id_estrela VARCHAR2(50),
    nome VARCHAR2(100),
    classificacao VARCHAR2(50),
    massa NUMBER,
    x NUMBER,
    y NUMBER,
    z NUMBER
);

CREATE OR REPLACE TYPE tp_tabela_estrela AS TABLE OF tp_estrela;


CREATE OR REPLACE TYPE tp_planeta AS OBJECT (
    id_astro VARCHAR2(50),
    raio NUMBER,
    classificacao VARCHAR2(50),
    massa NUMBER
);

CREATE OR REPLACE TYPE tp_tabela_planeta AS TABLE OF tp_planeta;


CREATE OR REPLACE TYPE tp_sistema AS OBJECT (
    estrela VARCHAR2(100),
    nome VARCHAR2(100)
);

CREATE OR REPLACE TYPE tp_tabela_sistema AS TABLE OF tp_sistema;


-- Definindo o pacote do CIENTISTA
CREATE OR REPLACE PACKAGE PACOTE_CIENTISTA AS
  PROCEDURE criar_estrela(
    p_id_estrela IN VARCHAR2,
    p_nome IN VARCHAR2,
    p_classificacao IN VARCHAR2,
    p_massa IN NUMBER,
    p_x IN NUMBER,
    p_y IN NUMBER,
    p_z IN NUMBER
  );

  FUNCTION ler_estrela(
    p_id_estrela IN VARCHAR2
  ) RETURN  tp_tabela_estrela PIPELINED;

  PROCEDURE atualizar_estrela(
    p_id_estrela IN VARCHAR2,
    p_nome IN VARCHAR2,
    p_classificacao IN VARCHAR2,
    p_massa IN NUMBER,
    p_x IN NUMBER,
    p_y IN NUMBER,
    p_z IN NUMBER
  );

  PROCEDURE deletar_estrela(
    p_id_estrela IN VARCHAR2
  );


-- relativo ao relatório
  FUNCTION obterEstrelas RETURN tp_tabela_estrela PIPELINED;
  FUNCTION obterPlanetas RETURN tp_tabela_planeta PIPELINED;
  FUNCTION obterSistemas RETURN tp_tabela_sistema PIPELINED;

END PACOTE_CIENTISTA;


-- Corpo do pacote Cientista
CREATE OR REPLACE PACKAGE BODY PACOTE_CIENTISTA AS

  PROCEDURE criar_estrela(
    p_id_estrela IN VARCHAR2,
    p_nome IN VARCHAR2,
    p_classificacao IN VARCHAR2,
    p_massa IN NUMBER,
    p_x IN NUMBER,
    p_y IN NUMBER,
    p_z IN NUMBER
  ) IS
  BEGIN
    BEGIN
      INSERT INTO ESTRELA (ID_ESTRELA, NOME, CLASSIFICACAO, MASSA, X, Y, Z)
      VALUES (p_id_estrela, p_nome, p_classificacao, p_massa, p_x, p_y, p_z);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Ja existe uma estrela com o ID ou coordenadas fornecidas.');
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
    END;
  END criar_estrela;

  FUNCTION ler_estrela(
    p_id_estrela IN VARCHAR2
  ) RETURN  tp_tabela_estrela PIPELINED;
    BEGIN
    FOR rec IN (
      SELECT ID_ESTRELA, NOME, CLASSIFICACAO, MASSA, X, Y, Z
      FROM ESTRELA
      WHERE ID_ESTRELA == p_id_estrela
    ) LOOP
      PIPE ROW(tp_estrela(
        rec.ID_ESTRELA,
        rec.NOME,
        rec.CLASSIFICACAO,
        rec.MASSA,
        rec.X,
        rec.Y,
        rec.Z
      ));
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erro ao obter estrelas: ' || SQLERRM);
      RAISE;
  END ler_estrela;



  PROCEDURE atualizar_estrela(
    p_id_estrela IN VARCHAR2,
    p_nome IN VARCHAR2,
    p_classificacao IN VARCHAR2,
    p_massa IN NUMBER,
    p_x IN NUMBER,
    p_y IN NUMBER,
    p_z IN NUMBER
  ) IS
  BEGIN
    BEGIN
      UPDATE ESTRELA
      SET NOME = p_nome,
          CLASSIFICACAO = p_classificacao,
          MASSA = p_massa,
          X = p_x,
          Y = p_y,
          Z = p_z
      WHERE ID_ESTRELA = p_id_estrela;
      
      IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Nenhuma estrela encontrada com o ID fornecido.');
      END IF;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Erro: As coordenadas fornecidas ja est?o sendo utilizadas.');
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
    END;
  END atualizar_estrela;

  PROCEDURE deletar_estrela(
    p_id_estrela IN VARCHAR2
  ) IS
  BEGIN
    BEGIN
      DELETE FROM ESTRELA
      WHERE ID_ESTRELA = p_id_estrela;
      
      IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Nenhuma estrela encontrada com o ID fornecido.');
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
    END;
  END deletar_estrela;

  -- Relativo ao relatório -------------------------------------------------------------

  FUNCTION obterEstrelas RETURN tp_tabela_estrela PIPELINED AS
  BEGIN
    FOR rec IN (
      SELECT ID_ESTRELA, NOME, CLASSIFICACAO, MASSA, X, Y, Z
      FROM ESTRELA
      WHERE MASSA IS NULL
    ) LOOP
      PIPE ROW(tp_estrela(
        rec.ID_ESTRELA,
        rec.NOME,
        rec.CLASSIFICACAO,
        rec.MASSA,
        rec.X,
        rec.Y,
        rec.Z
      ));
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erro ao obter estrelas: ' || SQLERRM);
      RAISE;
  END obterEstrelas;
  
  
  FUNCTION obterPlanetas RETURN tp_tabela_planeta PIPELINED AS
  BEGIN
    FOR rec IN (
      SELECT ID_ASTRO, RAIO, CLASSIFICACAO, MASSA
      FROM Planeta
      WHERE MASSA IS NULL
    ) LOOP
      PIPE ROW(tp_planeta(
        rec.ID_ASTRO,
        rec.RAIO,
        rec.CLASSIFICACAO,
        rec.MASSA
      ));
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erro ao obter planetas: ' || SQLERRM);
      RAISE;
  END obterPlanetas;
  
  
  FUNCTION obterSistemas RETURN tp_tabela_sistema PIPELINED AS
  BEGIN
    FOR rec IN (
      SELECT ESTRELA, NOME
      FROM SISTEMA
      WHERE NOME IS NULL
    ) LOOP
      PIPE ROW(tp_sistema(
        rec.ESTRELA,
        rec.NOME
      ));
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Erro ao obter sistemas: ' || SQLERRM);
      RAISE;
  END obterSistemas;

END PACOTE_CIENTISTA;




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------
-- Relatorio de Lider de Faccao --
----------------------------------


-- Criando um Tipo para exibir o relatorio de LIDER de FACCAO
CREATE OR REPLACE TYPE tp_relatorio_lider_faccao AS OBJECT (
    agrupamento VARCHAR2(100), -- Contem os itens distintos para o agrupamento escolhido.
    especie VARCHAR2(100), -- Campo adicionado para o caso DEFAULT, onde queremos exibir a especie como informacao da comunidade. Substitui o campo "qtd_comunidades" no caso DEFAULT.
    qtd_comunidades NUMBER, -- Quantidade de comunidades contidas na agregacao sendo definida.
    total_habitantes NUMBER -- Agregado de total de habitantes na determinada comunidade ou na agregacao sendo definida.
);

-- Criando um Tipo para a tabela de registros que sera utilizada para exibir o relatorio de LIDER de FACCAO
CREATE OR REPLACE TYPE tp_relatorio_tabela_lider_faccao AS TABLE OF tp_relatorio_lider_faccao;

-- Funcao para gerar o relatorio do LIDER de FACCAO
CREATE OR REPLACE FUNCTION relatorio_lider_faccao(
    p_lider_id IN CHAR,
    p_agrupamento IN VARCHAR2 DEFAULT NULL
) RETURN tp_relatorio_tabela_lider_faccao PIPELINED
IS
    v_faccao_nome VARCHAR2(15);
BEGIN
    -- Buscando o nome da FACCAO do LIDER com o CPI informado
    SELECT FACCAO.NOME
    INTO v_faccao_nome
    FROM FACCAO
    JOIN LIDER ON FACCAO.LIDER = LIDER.CPI
    WHERE LIDER.CPI = p_lider_id;

    -- Verificando se a FACCAO foi encontrada
    IF v_faccao_nome IS NOT NULL THEN
        -- Caso DEFAULT: informacoes sobre as comunidades da FACCAO do LIDER
        IF p_agrupamento IS NULL THEN
            FOR rec IN (
                SELECT C.NOME AS AGRUPAMENTO, C.ESPECIE AS ESPECIE, C.QTD_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, rec.ESPECIE, NULL, rec.QTD_HABITANTES));
            END LOOP;

        -- Agrupamento por ESPECIE
        ELSIF p_agrupamento = 'ESPECIE' THEN
            FOR rec IN (
                SELECT C.ESPECIE AS AGRUPAMENTO, COUNT(C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY C.ESPECIE
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por PLANETA
        ELSIF p_agrupamento = 'PLANETA' THEN
            FOR rec IN (
                SELECT H.PLANETA AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY H.PLANETA
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por SISTEMA
        ELSIF p_agrupamento = 'SISTEMA' THEN
            FOR rec IN (
                SELECT S.NOME AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                JOIN ORBITA_PLANETA OP ON H.PLANETA = OP.PLANETA
                JOIN ESTRELA E ON OP.ESTRELA = E.ID_ESTRELA
                JOIN SISTEMA S ON E.ID_ESTRELA = S.ESTRELA
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY S.NOME
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        -- Agrupamento por NACAO
        ELSIF p_agrupamento = 'NACAO' THEN
            FOR rec IN (
                SELECT D.NACAO AS AGRUPAMENTO, COUNT(DISTINCT C.NOME) AS QTD_COMUNIDADES, SUM(C.QTD_HABITANTES) AS TOTAL_HABITANTES
                FROM COMUNIDADE C
                JOIN PARTICIPA P ON C.ESPECIE = P.ESPECIE AND C.NOME = P.COMUNIDADE
                JOIN HABITACAO H ON C.ESPECIE = H.ESPECIE AND C.NOME = H.COMUNIDADE
                JOIN DOMINANCIA D ON H.PLANETA = D.PLANETA
                WHERE P.FACCAO = v_faccao_nome
                GROUP BY D.NACAO
            ) LOOP
                PIPE ROW(tp_relatorio_lider_faccao(rec.AGRUPAMENTO, NULL, rec.QTD_COMUNIDADES, rec.TOTAL_HABITANTES));
            END LOOP;

        ELSE
            RETURN;
        END IF;

    ELSE
        RETURN;
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN;
    WHEN OTHERS THEN
        RETURN;
END;




